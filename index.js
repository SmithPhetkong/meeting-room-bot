const express = require("express");
const dotenv = require("dotenv");
const { MongoClient, ObjectId } = require("mongodb"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import ObjectId
const line = require("@line/bot-sdk");
const moment = require("moment-timezone");

// Configure dotenv
dotenv.config();

const app = express();

// Line bot configuration
const lineConfig = {
  channelAccessToken: process.env.ACCESS_TOKEN,
  channelSecret: process.env.SECRET_TOKEN,
};
const client = new line.Client(lineConfig);

// MongoDB collections
let bookingsCollection, roomsCollection, adminCollection;

// Initialize MongoDB connection
const initializeMongoDB = async () => {
  try {
    const clientMongo = new MongoClient(process.env.MONGODB_URI, {
      useUnifiedTopology: true,
    });
    await clientMongo.connect();
    console.log("Connected to MongoDB Atlas");
    const db = clientMongo.db("RUMA"); // Replace "RUMA" with your database name
    bookingsCollection = db.collection("bookings");
    roomsCollection = db.collection("rooms");
    adminCollection = db.collection("admins");
  } catch (error) {
    console.error("Error connecting to MongoDB Atlas:", error);
    process.exit(1);
  }
};
initializeMongoDB();

// Function to insert booking data into MongoDB
const saveBookingToMongoDB = async (bookingData) => {
  try {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô MongoDB (collection "bookings")
    const result = await bookingsCollection.insertOne({
      ...bookingData,
      createdAt: new Date(), // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      updatedAt: new Date(), // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    });
    console.log("Booking saved successfully:", result);
  } catch (error) {
    console.error("Error saving booking to MongoDB:", error);
  }
};

// Function to cancel booking
const cancelBooking = async (bookingId) => {
  try {
    const result = await bookingsCollection.deleteOne({ bookingId });
    return result.deletedCount > 0; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  } catch (error) {
    console.error("Error canceling booking:", error);
    return false;
  }
};

// Function to view bookings by email
const viewMyBookings = async (email) => {
  try {
    const bookings = await bookingsCollection.find({ email }).toArray();
    return bookings;
  } catch (error) {
    console.error("Error fetching bookings:", error);
    return [];
  }
};

// Function to create booking confirmation Flex Message
const createBookingConfirmationFlexMessage = (bookingData) => {
  return {
    type: "bubble",
    body: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
          weight: "bold",
          size: "lg",
          color: "#1DB446",
        },
        {
          type: "text",
          text: `‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${bookingData.bookingId}`,
          size: "sm",
          color: "#666666",
          wrap: true,
        },
        {
          type: "text",
          text: `‡∏´‡πâ‡∏≠‡∏á: ${bookingData.room}`,
          size: "sm",
          color: "#666666",
          wrap: true,
        },
        {
          type: "text",
          text: `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${bookingData.date}`,
          size: "sm",
          color: "#666666",
          wrap: true,
        },
        {
          type: "text",
          text: `‡πÄ‡∏ß‡∏•‡∏≤: ${bookingData.startTime} - ${bookingData.endTime}`,
          size: "sm",
          color: "#666666",
          wrap: true,
        },
        {
          type: "text",
          text: `‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${bookingData.meetingTopic}`,
          size: "sm",
          color: "#666666",
          wrap: true,
        },
        {
          type: "text",
          text: `‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${bookingData.reserverName}`,
          size: "sm",
          color: "#666666",
          wrap: true,
        },
        {
          type: "text",
          text: `‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${bookingData.email}`,
          size: "sm",
          color: "#666666",
          wrap: true,
        },
      ],
    },
  };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°
const createBookingConfirmationMessage = (bookingData) => {
  return {
    type: "flex",
    altText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!",
            weight: "bold",
            size: "lg",
            color: "#1DB446",
          },
          {
            type: "text",
            text: `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${bookingData.date}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üïí ‡πÄ‡∏ß‡∏•‡∏≤: ${bookingData.startTime} - ${bookingData.endTime}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üè¢ ‡∏´‡πâ‡∏≠‡∏á: ${bookingData.room}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üìã ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${bookingData.meetingTopic}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üë§ ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${bookingData.reserverName}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${bookingData.phoneNumber}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°: ${bookingData.numberOfAttendees}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üéØ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°: ${bookingData.additionalEquipment}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${bookingData.email}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üîë ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${bookingData.bookingId}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          {
            type: "button",
            style: "primary",
            color: "#007BFF",
            action: {
              type: "postback",
              label: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
              data: `action=confirmBooking&bookingId=${bookingData.bookingId}`,
            },
          },
        ],
      },
    },
  };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°
const createBookingSummaryMessage = (bookingData) => {
  return {
    type: "flex",
    altText: "‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
            weight: "bold",
            size: "lg",
            color: "#1DB446",
          },
          {
            type: "text",
            text: `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${bookingData.date}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üïí ‡πÄ‡∏ß‡∏•‡∏≤: ${bookingData.startTime} - ${bookingData.endTime}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üè¢ ‡∏´‡πâ‡∏≠‡∏á: ${bookingData.room}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üìã ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${bookingData.meetingTopic}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üë§ ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${bookingData.reserverName}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${bookingData.phoneNumber}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°: ${bookingData.numberOfAttendees}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üéØ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°: ${bookingData.additionalEquipment}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${bookingData.email}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
          {
            type: "text",
            text: `üîë ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${bookingData.bookingId}`,
            size: "sm",
            color: "#666666",
            wrap: true,
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          {
            type: "button",
            style: "primary",
            color: "#007BFF",
            action: {
              type: "postback",
              label: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
              data: `action=confirmBooking&bookingId=${bookingData.bookingId}`,
            },
          },
        ],
      },
    },
  };
};

// Session storage
const session = {};

// ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const questions = [
  { key: "meetingTopic", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°" },
  { key: "reserverName", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á" },
  { key: "phoneNumber", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" },
  { key: "numberOfAttendees", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°" },
  {
    key: "additionalEquipment",
    text: "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå)",
  },
  { key: "email", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" },
];

// ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
const editQuestions = [
  { key: "meetingTopic", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà" },
  { key: "numberOfAttendees", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà" },
  { key: "additionalEquipment", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" },
  { key: "reserverName", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" },
  { key: "phoneNumber", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà" },
  { key: "email", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà" },
];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
const generateBookingId = () => {
  const datePart = moment().format("YYYYMMDD");
  const randomPart = Math.floor(100 + Math.random() * 900); // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏° 3 ‡∏´‡∏•‡∏±‡∏Å
  return `${datePart}-${randomPart}`;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
const askNextQuestion = (userId, replyToken) => {
  const userSession = session[userId];
  const currentQuestionIndex = userSession.currentQuestionIndex || 0;

  if (currentQuestionIndex < questions.length) {
    const question = questions[currentQuestionIndex];
    userSession.currentQuestionIndex = currentQuestionIndex + 1;

    return client.replyMessage(replyToken, {
      type: "text",
      text: question.text,
    });
  } else {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    userSession.bookingId = generateBookingId(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á

    const summaryMessage = createBookingSummaryMessage(userSession);
    return client.replyMessage(replyToken, summaryMessage);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
const askNextEditQuestion = (userId, replyToken) => {
  const userSession = session[userId];
  const currentQuestionIndex = userSession.currentQuestionIndex || 0;

  if (currentQuestionIndex < editQuestions.length) {
    const question = editQuestions[currentQuestionIndex];
    userSession.currentQuestionIndex = currentQuestionIndex + 1; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï currentQuestionIndex

    return client.replyMessage(replyToken, {
      type: "text",
      text: question.text,
    });
  } else {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô MongoDB
    const updatedBooking = {
      meetingTopic: userSession.meetingTopic,
      numberOfAttendees: userSession.numberOfAttendees,
      additionalEquipment: userSession.additionalEquipment,
      reserverName: userSession.reserverName,
      phoneNumber: userSession.phoneNumber,
      email: userSession.email,
      updatedAt: new Date(),
    };

    bookingsCollection.updateOne(
      { bookingId: userSession.bookingId }, // ‡πÉ‡∏ä‡πâ bookingId ‡∏à‡∏≤‡∏Å session
      { $set: updatedBooking }
    )
      .then(() => {
        client.replyMessage(replyToken, {
          type: "text",
          text: "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        });
      })
      .catch((error) => {
        console.error("Error updating booking:", error);
        client.replyMessage(replyToken, {
          type: "text",
          text: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      });
  }
};

const askNextRoomQuestion = (userId, replyToken) => {
  const roomQuestions = [
    { key: "name", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (Name):" },
    { key: "location", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (Location):" },
    { key: "capacity", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (Capacity):" },
    { key: "imageUrl", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (ImageURL):" },
    { key: "price", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤ (Price):" },
  ];

  const userSession = session[userId];
  const currentQuestionIndex = userSession.currentQuestionIndex || 0;

  if (currentQuestionIndex < roomQuestions.length) {
    const question = roomQuestions[currentQuestionIndex];
    userSession.currentQuestionIndex = currentQuestionIndex + 1;

    return client.replyMessage(replyToken, {
      type: "text",
      text: question.text,
    });
  } else {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏•‡∏á MongoDB
    const newRoom = {
      name: userSession.name,
      location: userSession.location,
      capacity: parseInt(userSession.capacity, 10),
      imageUrl: userSession.imageUrl,
      price: parseFloat(userSession.price),
      createdAt: new Date(),
    };

    roomsCollection.insertOne(newRoom)
      .then(() => {
        client.replyMessage(replyToken, {
          type: "text",
          text: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        });
      })
      .catch((error) => {
        console.error("Error adding room:", error);
        client.replyMessage(replyToken, {
          type: "text",
          text: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      });

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session
    delete session[userId];
  }
};

// Mock admin credentials (you can replace this with a database or environment variables)
const adminCredentials = {
  username: "admin",
  password: "1234",
};

// Function to handle admin login
const handleAdminLogin = (userId, replyToken, userMessage) => {
  const userSession = session[userId];

  if (!userSession.adminStep) {
    userSession.adminStep = "username";
    return client.replyMessage(replyToken, {
      type: "text",
      text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Username ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
    });
  }

  if (userSession.adminStep === "username") {
    userSession.adminUsername = userMessage;
    userSession.adminStep = "password";
    return client.replyMessage(replyToken, {
      type: "text",
      text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Password ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
    });
  }

  if (userSession.adminStep === "password") {
    userSession.adminPassword = userMessage;

    // Check credentials
    if (
      userSession.adminUsername === adminCredentials.username &&
      userSession.adminPassword === adminCredentials.password
    ) {
      userSession.isAdmin = true;
      delete userSession.adminStep;

      // Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
      const adminMenuFlexMessage = {
        type: "flex",
        altText: "‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
        contents: {
          type: "bubble",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "üìã ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                weight: "bold",
                size: "lg",
                color: "#1DB446",
              },
              {
                type: "button",
                style: "primary",
                color: "#007BFF",
                action: {
                  type: "postback",
                  label: "üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
                  data: "action=viewBookings",
                },
              },
              {
                type: "button",
                style: "primary",
                color: "#28A745",
                action: {
                  type: "postback",
                  label: "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
                  data: "action=addRoom",
                },
              },
              {
                type: "button",
                style: "primary",
                color: "#FF5733",
                action: {
                  type: "postback",
                  label: "üóëÔ∏è ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
                  data: "action=deleteRoom",
                },
              },
              {
                type: "button",
                style: "primary",
                color: "#6C757D",
                action: {
                  type: "postback",
                  label: "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                  data: "action=addAdmin",
                },
              },
            ],
          },
        },
      };

      return client.replyMessage(replyToken, adminMenuFlexMessage);
    } else {
      delete userSession.adminStep;
      return client.replyMessage(replyToken, {
        type: "text",
        text: "‚ùå Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      });
    }
  }
};

// ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô askNextAdminQuestion ‡∏Å‡πà‡∏≠‡∏ô handleEvent
const askNextAdminQuestion = async (userId, replyToken, userMessage) => {
  const adminQuestions = [
    { key: "username", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Username ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô:" },
    { key: "password", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Password ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô:" },
    { key: "email", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Email ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô:" },
  ];

  const userSession = session[userId] || (session[userId] = {});
  const currentQuestionIndex = userSession.currentQuestionIndex || 0;

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  if (currentQuestionIndex > 0) {
    const previousQuestion = adminQuestions[currentQuestionIndex - 1];
    userSession[previousQuestion.key] = userMessage;
  }

  if (currentQuestionIndex < adminQuestions.length) {
    const question = adminQuestions[currentQuestionIndex];
    userSession.currentQuestionIndex = currentQuestionIndex + 1;

    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    try {
      await client.replyMessage(replyToken, {
        type: "text",
        text: question.text,
      });
    } catch (error) {
      console.error("Error sending message:", error);
    }
  } else {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß
    const newAdmin = {
      username: userSession.username,
      password: userSession.password,
      email: userSession.email,
      createdAt: new Date(),
    };

    try {
      await adminCollection.insertOne(newAdmin);
      await client.replyMessage(replyToken, {
        type: "text",
        text: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      });
    } catch (error) {
      console.error("Error adding admin:", error);
      await client.replyMessage(replyToken, {
        type: "text",
        text: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      });
    }

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session
    delete session[userId];
  }
};

// Handle incoming events
const handleEvent = async (event) => {
  if (event.type === "message" && event.message.type === "text") {
    const userMessage = event.message.text;
    const userId = event.source.userId;

    if (!session[userId]) {
      session[userId] = {};
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (userMessage === "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô") {
      session[userId] = { mode: "adminLogin", adminStep: "username" };
      return client.replyMessage(event.replyToken, {
        type: "text",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Username ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
      });
    }

    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (session[userId].mode === "adminLogin") {
      const userSession = session[userId];

      if (userSession.adminStep === "username") {
        userSession.adminUsername = userMessage;
        userSession.adminStep = "password";
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Password ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
        });
      }

      if (userSession.adminStep === "password") {
        userSession.adminPassword = userMessage;

        try {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Username ‡πÅ‡∏•‡∏∞ Password ‡∏à‡∏≤‡∏Å MongoDB
          const admin = await adminCollection.findOne({
            username: userSession.adminUsername,
            password: userSession.adminPassword, // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ Password ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
          });

          if (admin) {
            userSession.isAdmin = true;
            delete userSession.adminStep;

            // Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
            const adminMenuFlexMessage = {
              type: "flex",
              altText: "‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
              contents: {
                type: "bubble",
                body: {
                  type: "box",
                  layout: "vertical",
                  contents: [
                    {
                      type: "text",
                      text: "üìã ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                      weight: "bold",
                      size: "lg",
                      color: "#1DB446",
                    },
                    {
                      type: "button",
                      style: "primary",
                      color: "#007BFF",
                      action: {
                        type: "postback",
                        label: "üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
                        data: "action=viewBookings",
                      },
                    },
                    {
                      type: "button",
                      style: "primary",
                      color: "#28A745",
                      action: {
                        type: "postback",
                        label: "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
                        data: "action=addRoom",
                      },
                    },
                    {
                      type: "button",
                      style: "primary",
                      color: "#FF5733",
                      action: {
                        type: "postback",
                        label: "üóëÔ∏è ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
                        data: "action=deleteRoom",
                      },
                    },
                    {
                      type: "button",
                      style: "primary",
                      color: "#6C757D",
                      action: {
                        type: "postback",
                        label: "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                        data: "action=addAdmin",
                      },
                    },
                  ],
                },
              },
            };

            return client.replyMessage(event.replyToken, adminMenuFlexMessage);
          } else {
            delete session[userId];
            return client.replyMessage(event.replyToken, {
              type: "text",
              text: "‚ùå Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            });
          }
        } catch (error) {
          console.error("Error checking admin credentials:", error);
          return client.replyMessage(event.replyToken, {
            type: "text",
            text: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
          });
        }
      }
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (userMessage === "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô") {
      if (!session[userId].isAdmin) {
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà",
        });
      }

      session[userId] = { mode: "addAdmin", currentQuestionIndex: 0 };
      return askNextAdminQuestion(userId, event.replyToken);
    }

    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (session[userId].mode === "addAdmin") {
      return askNextAdminQuestion(userId, event.replyToken, userMessage);
    }

    if (userMessage === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á") {
      session[userId] = { mode: "cancel" }; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      return client.replyMessage(event.replyToken, {
        type: "text",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      });
    }
    

    if (session[userId] && session[userId].mode === "cancel") {
      const bookingId = userMessage;

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô MongoDB
      const booking = await bookingsCollection.findOne({ bookingId });

      if (!booking) {
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
      const cancelFlexMessage = {
        type: "flex",
        altText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
        contents: {
          type: "bubble",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
                weight: "bold",
                size: "lg",
                color: "#FF0000",
              },
              {
                type: "text",
                text: `‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${booking.bookingId}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `‡∏´‡πâ‡∏≠‡∏á: ${booking.room}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${booking.date}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `‡πÄ‡∏ß‡∏•‡∏≤: ${booking.startTime} - ${booking.endTime}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${booking.meetingTopic}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${booking.reserverName}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${booking.email}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
            ],
          },
          footer: {
            type: "box",
            layout: "vertical",
            spacing: "sm",
            contents: [
              {
                type: "button",
                style: "primary",
                color: "#FF0000",
                action: {
                  type: "postback",
                  label: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                  data: `action=confirmCancel&bookingId=${booking.bookingId}`,
                },
              },
            ],
          },
        },
      };

      return client.replyMessage(event.replyToken, cancelFlexMessage);
    }

    if (session[userId] && session[userId].mode === "new") {
      const userSession = session[userId];
      const currentQuestionIndex = userSession.currentQuestionIndex - 1;

      if (
        currentQuestionIndex >= 0 &&
        currentQuestionIndex < questions.length
      ) {
        const question = questions[currentQuestionIndex];
        userSession[question.key] = userMessage;
      }

      return askNextQuestion(userId, event.replyToken);
    }

    if (userMessage === "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô") {
      session[userId] = { mode: "viewBookings" }; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      return client.replyMessage(event.replyToken, {
        type: "text",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
      });
    }

    if (session[userId] && session[userId].mode === "viewBookings") {
      const email = userMessage;

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô MongoDB
      const bookings = await viewMyBookings(email);

      if (bookings.length === 0) {
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ",
        });
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      const bookingsFlexMessage = {
        type: "flex",
        altText: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        contents: {
          type: "carousel",
          contents: bookings.map((booking) => ({
            type: "bubble",
            body: {
              type: "box",
              layout: "vertical",
              contents: [
                {
                  type: "text",
                  text: "üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
                  weight: "bold",
                  size: "lg",
                  color: "#1DB446",
                },
                {
                  type: "text",
                  text: `üîë ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${booking.bookingId}`,
                  size: "sm",
                  color: "#666666",
                  wrap: true,
                },
                {
                  type: "text",
                  text: `üè¢ ‡∏´‡πâ‡∏≠‡∏á: ${booking.room}`,
                  size: "sm",
                  color: "#666666",
                  wrap: true,
                },
                {
                  type: "text",
                  text: `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${booking.date}`,
                  size: "sm",
                  color: "#666666",
                  wrap: true,
                },
                {
                  type: "text",
                  text: `üïí ‡πÄ‡∏ß‡∏•‡∏≤: ${booking.startTime} - ${booking.endTime}`,
                  size: "sm",
                  color: "#666666",
                  wrap: true,
                },
                {
                  type: "text",
                  text: `üìã ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${booking.meetingTopic}`,
                  size: "sm",
                  color: "#666666",
                  wrap: true,
                },
                {
                  type: "text",
                  text: `üë§ ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${booking.reserverName}`,
                  size: "sm",
                  color: "#666666",
                  wrap: true,
                },
                {
                  type: "text",
                  text: `üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${booking.email}`,
                  size: "sm",
                  color: "#666666",
                  wrap: true,
                },
              ],
            },
          })),
        },
      };

      return client.replyMessage(event.replyToken, bookingsFlexMessage);
    }

    if (userMessage === "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á") {
      const now = moment().tz("Asia/Bangkok").format("YYYY-MM-DDTHH:mm");

      // Flex Message for selecting date and time
      const flexMessage = {
        type: "flex",
        altText: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤",
        contents: {
          type: "bubble",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤",
                weight: "bold",
                size: "lg",
                color: "#1DB446", // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
              },
              {
                type: "box",
                layout: "vertical",
                margin: "lg",
                spacing: "sm",
                contents: [
                  {
                    type: "button",
                    action: {
                      type: "datetimepicker",
                      label: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                      data: "action=selectDate",
                      mode: "date",
                      min: now.split("T")[0], // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                    },
                    style: "primary", // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å
                    color: "#007BFF", // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
                  },
                  {
                    type: "button",
                    action: {
                      type: "datetimepicker",
                      label: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
                      data: "action=startTime",
                      mode: "time",
                      min: now.split("T")[1], // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    },
                    style: "primary", // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å
                    color: "#FF5733", // ‡∏™‡∏µ‡∏™‡πâ‡∏°
                  },
                  {
                    type: "button",
                    action: {
                      type: "datetimepicker",
                      label: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
                      data: "action=endTime",
                      mode: "time",
                      min: now.split("T")[1], // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    },
                    style: "primary", // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å
                    color: "#28A745", // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                  },
                ],
              },
            ],
          },
          styles: {
            body: {
              backgroundColor: "#F8F9FA", // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á Flex Message
            },
          },
        },
      };

      return client.replyMessage(event.replyToken, flexMessage);
    }

    if (userMessage === "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á") {
      session[userId] = { mode: "edit" }; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      return client.replyMessage(event.replyToken, {
        type: "text",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
      });
    }

    if (session[userId] && session[userId].mode === "edit" && !session[userId].bookingId) {
      const bookingId = userMessage;

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô MongoDB
      const booking = await bookingsCollection.findOne({ bookingId });

      if (!booking) {
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô session
      session[userId] = {
        ...booking,
        mode: "edit",
        bookingId: bookingId,
        currentQuestionIndex: 0, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏£‡∏Å
      };

      return askNextEditQuestion(userId, event.replyToken);
    }

    if (session[userId] && session[userId].mode === "edit") {
      const userSession = session[userId];
      const currentQuestionIndex = userSession.currentQuestionIndex - 1;

      if (currentQuestionIndex >= 0 && currentQuestionIndex < editQuestions.length) {
        const question = editQuestions[currentQuestionIndex];
        userSession[question.key] = userMessage; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô session
      }

      return askNextEditQuestion(userId, event.replyToken);
    }

    if (session[userId] && session[userId].mode === "addRoom") {
      const userSession = session[userId];
      const roomQuestions = ["name", "location", "capacity", "imageUrl", "price"];
      const currentQuestionIndex = userSession.currentQuestionIndex - 1;

      if (currentQuestionIndex >= 0 && currentQuestionIndex < roomQuestions.length) {
        const key = roomQuestions[currentQuestionIndex];
        userSession[key] = userMessage; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      }

      return askNextRoomQuestion(userId, event.replyToken);
    }

    if (userMessage === "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á") {
      return client.replyMessage(event.replyToken, {
        type: "text",
        text: `üåø ‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Å‡∏±‡∏ö RUMA ‡∏á‡πà‡∏≤‡∏¢‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß üíº‚òïÔ∏è

‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏¢!
‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á & ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"
‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏∏‡∏î‡∏õ‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üí´

‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô ‚è∞
‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á? ‡πÅ‡∏•‡∏∞‡∏à‡∏ö‡∏ï‡∏≠‡∏ô‡πÑ‡∏´‡∏ô? (‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡πÉ‡∏à‡πÄ‡∏•‡∏¢!)

‡∏î‡∏π‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞!
RUMA ‡∏à‡∏∞‡πÇ‡∏ä‡∏ß‡πå‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏∏‡∏ì
‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≠‡∏á‡πÉ‡∏à‡πÉ‡∏Ñ‡∏£ üòò

‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≤ ‡πÜ üìã

‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á (‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ RUMA ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡πâ‡∏≤)
‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ RUMA ‡πÇ‡∏ó‡∏£‡∏´‡∏≤
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ (‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå? ‡πÑ‡∏ß‡∏ó‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î?)
‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≠‡∏á
‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô üíå
RUMA ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì
‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏î ‚Äú‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‚Äù ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`,
      });
    }
  } else if (event.type === "postback") {
    const data = event.postback.data;

    if (data.startsWith("action=selectDate")) {
      const selectedDate = event.postback.params.date;

      if (!session[event.source.userId]) {
        session[event.source.userId] = {};
      }
      if (!session[event.source.userId].mode) {
        session[event.source.userId].mode = "new";
      }

      session[event.source.userId].date = selectedDate;

      return client.replyMessage(event.replyToken, {
        type: "text",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
        quickReply: {
          items: [
            {
              type: "action",
              action: {
                type: "datetimepicker",
                label: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
                data: "action=startTime",
                mode: "time",
              },
            },
          ],
        },
      });
    } else if (data.startsWith("action=startTime")) {
      const startTime = event.postback.params.time;

      if (!session[event.source.userId]) {
        session[event.source.userId] = {};
      }
      if (!session[event.source.userId].mode) {
        session[event.source.userId].mode = "new";
      }

      session[event.source.userId].startTime = startTime;

      return client.replyMessage(event.replyToken, {
        type: "text",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
        quickReply: {
          items: [
            {
              type: "action",
              action: {
                type: "datetimepicker",
                label: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
                data: "action=endTime",
                mode: "time",
              },
            },
          ],
        },
      });
    } else if (data.startsWith("action=endTime")) {
      const endTime = event.postback.params.time;

      if (!session[event.source.userId]) {
        session[event.source.userId] = {};
      }
      if (!session[event.source.userId].mode) {
        session[event.source.userId].mode = "new";
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏ô session
      session[event.source.userId].endTime = endTime;

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å session
      const selectedDate = session[event.source.userId]?.date;
      const startTime = session[event.source.userId]?.startTime;
      const endTimeSession = session[event.source.userId]?.endTime;

      if (!selectedDate || !startTime || !endTimeSession) {
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      }

      // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const conflictingBookings = await bookingsCollection.find({
        date: selectedDate,
        $or: [
          {
            $and: [
              { startTime: { $lt: endTimeSession } }, // ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
              { endTime: { $gt: startTime } },       // ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            ],
          },
        ],
      }).toArray();

      console.log("Conflicting Bookings:", conflictingBookings);

      const bookedRooms = conflictingBookings.map((booking) => booking.room);
      console.log("Booked Rooms:", bookedRooms);

      const allRooms = await roomsCollection.find({}).toArray();
      console.log("All Rooms:", allRooms);

      const availableRooms = allRooms.filter((room) => {
        return (
          !bookedRooms.includes(room.name) &&
          room.name &&
          room.location &&
          room.capacity
        );
      });
      console.log("Available Rooms:", availableRooms);

      if (availableRooms.length === 0) {
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà",
        });
      }

      const roomFlexMessage = {
        type: "flex",
        altText: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
        contents: {
          type: "carousel",
          contents: availableRooms.slice(0, 10).map((room) => ({
            type: "bubble",
            hero: {
              type: "image",
              url: room.imageUrl || "https://via.placeholder.com/1024x512.png?text=No+Image",
              size: "full",
              aspectRatio: "20:13",
              aspectMode: "cover",
            },
            body: {
              type: "box",
              layout: "vertical",
              contents: [
                {
                  type: "text",
                  text: room.name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á",
                  weight: "bold",
                  size: "lg",
                  wrap: true,
                },
                {
                  type: "text",
                  text: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${room.location || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}`,
                  size: "sm",
                  color: "#666666",
                  wrap: true,
                },
                {
                  type: "text",
                  text: `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏: ${room.capacity || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"} ‡∏Ñ‡∏ô`,
                  size: "sm",
                  color: "#666666",
                  wrap: true,
                },
              ],
            },
            footer: {
              type: "box",
              layout: "vertical",
              spacing: "sm",
              contents: [
                {
                  type: "button",
                  style: "primary",
                  color: "#007BFF",
                  action: {
                    type: "postback",
                    label: "‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ô‡∏µ‡πâ",
                    data: `action=bookRoom&roomId=${room._id}`,
                  },
                },
              ],
            },
          })),
        },
      };

      try {
        return client.replyMessage(event.replyToken, roomFlexMessage);
      } catch (error) {
        console.error("Error sending Flex Message:", error);
      }
    } else if (data.startsWith("action=bookRoom")) {
      const roomId = data.split("&")[1].split("=")[1];
      console.log("roomId:", roomId);

      let room;
      try {
        room = await roomsCollection.findOne({ _id: new ObjectId(roomId) });
      } catch (error) {
        console.error("Error finding room:", error);
        return client.replyMessage(replyToken, {
          type: "text",
          text: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      }

      if (!room) {
        return client.replyMessage(replyToken, {
          type: "text",
          text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      }

      if (!session[event.source.userId]) {
        session[event.source.userId] = {};
      }

      const userSession = session[event.source.userId];
      userSession.mode = "new";
      userSession.room = room.name;

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡∏°‡πà
      userSession.date =
        userSession.date || moment().tz("Asia/Bangkok").format("YYYY-MM-DD");
      userSession.startTime = userSession.startTime || "12:00";
      userSession.endTime = userSession.endTime || "14:00";

      userSession.currentQuestionIndex = 0;

      return askNextQuestion(event.source.userId, event.replyToken);
    } else if (data.startsWith("action=confirmBooking")) {
      const bookingId = data.split("&")[1].split("=")[1];
      console.log("Confirming booking with ID:", bookingId);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å session
      const userSession = Object.values(session).find(
        (s) => s.bookingId === bookingId
      );

      if (!userSession) {
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡∏á MongoDB
      try {
        await saveBookingToMongoDB(userSession);

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return client.replyMessage(event.replyToken, {
          type: "flex",
          altText: "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          contents: {
            type: "bubble",
            body: {
              type: "box",
              layout: "vertical",
              contents: [
                {
                  type: "text",
                  text: "‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                  weight: "bold",
                  size: "lg",
                  color: "#1DB446",
                },
                {
                  type: "text",
                  text: `‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${bookingId}`,
                  size: "sm",
                  color: "#666666",
                  wrap: true,
                },
              ],
            },
          },
        });
      } catch (error) {
        console.error("Error saving booking to MongoDB:", error);
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      }
    } else if (data.startsWith("action=confirmCancel")) {
      const bookingId = data.split("&")[1].split("=")[1];

      const success = await cancelBooking(bookingId);

      if (success) {
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        });
      } else {
        return client.replyMessage(event.replyToken, {
          type: "text",
          text: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
      }
    } else if (data.startsWith("action=selectBookingDate")) {
      const selectedDate = event.postback.params.date;
      return showBookingsForDate(selectedDate, event.replyToken);
    } else if (data === "action=viewBookings") {
      return showDatePickerForBookings(event.replyToken);
    } else if (data === "action=addRoom") {
      session[event.source.userId] = { mode: "addRoom", currentQuestionIndex: 0 };
      return askNextRoomQuestion(event.source.userId, event.replyToken);
    } else if (data === "action=deleteRoom") {
      return showRoomsForDeletion(event.replyToken);
    } else if (data.startsWith("action=deleteRoom&roomId")) {
      const roomId = data.split("&")[1].split("=")[1];
      return deleteRoom(roomId, event.replyToken);
    } else if (data === "action=addAdmin") {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
      session[event.source.userId] = { mode: "addAdmin", currentQuestionIndex: 0 };
      return askNextAdminQuestion(event.source.userId, event.replyToken);
    } else if (session[event.source.userId] && session[event.source.userId].mode === "addAdmin") {
      // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      const userSession = session[event.source.userId];
      const adminQuestions = ["username", "password", "email"];
      const currentQuestionIndex = userSession.currentQuestionIndex - 1;

      if (currentQuestionIndex >= 0 && currentQuestionIndex < adminQuestions.length) {
        const key = adminQuestions[currentQuestionIndex];
        userSession[key] = event.message.text; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      }

      return askNextAdminQuestion(event.source.userId, event.replyToken);
    }
  }
};

// Function to show date picker for bookings
const showDatePickerForBookings = (replyToken) => {
  const now = moment().tz("Asia/Bangkok").format("YYYY-MM-DD");

  const datePickerFlexMessage = {
    type: "flex",
    altText: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
            weight: "bold",
            size: "lg",
            color: "#1DB446",
          },
          {
            type: "button",
            style: "primary",
            color: "#007BFF",
            action: {
              type: "datetimepicker",
              label: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
              data: "action=selectBookingDate",
              mode: "date",
              min: now, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
            },
          },
        ],
      },
    },
  };

  return client.replyMessage(replyToken, datePickerFlexMessage);
};

// Function to show bookings for a selected date
const showBookingsForDate = async (selectedDate, replyToken) => {
  try {
    const bookings = await bookingsCollection.find({ date: selectedDate }).toArray();

    if (bookings.length === 0) {
      return client.replyMessage(replyToken, {
        type: "text",
        text: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDate}`,
      });
    }

    const bookingsFlexMessage = {
      type: "flex",
      altText: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDate}`,
      contents: {
        type: "carousel",
        contents: bookings.map((booking) => ({
          type: "bubble",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
                weight: "bold",
                size: "lg",
                color: "#1DB446",
              },
              {
                type: "text",
                text: `üîë ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${booking.bookingId}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `üè¢ ‡∏´‡πâ‡∏≠‡∏á: ${booking.room}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${booking.date}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `üïí ‡πÄ‡∏ß‡∏•‡∏≤: ${booking.startTime} - ${booking.endTime}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `üìã ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${booking.meetingTopic}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `üë§ ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${booking.reserverName}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
            ],
          },
        })),
      },
    };

    return client.replyMessage(replyToken, bookingsFlexMessage);
  } catch (error) {
    console.error("Error fetching bookings:", error);
    return client.replyMessage(replyToken, {
      type: "text",
      text: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    });
  }
};

// Function to show rooms for deletion
const showRoomsForDeletion = async (replyToken) => {
  try {
    const rooms = await roomsCollection.find({}).toArray();

    if (rooms.length === 0) {
      return client.replyMessage(replyToken, {
        type: "text",
        text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
      });
    }

    const roomsFlexMessage = {
      type: "flex",
      altText: "‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
      contents: {
        type: "carousel",
        contents: rooms.map((room) => ({
          type: "bubble",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: room.name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á",
                weight: "bold",
                size: "lg",
                wrap: true,
              },
              {
                type: "text",
                text: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${room.location || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
              {
                type: "text",
                text: `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏: ${room.capacity || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"} ‡∏Ñ‡∏ô`,
                size: "sm",
                color: "#666666",
                wrap: true,
              },
            ],
          },
          footer: {
            type: "box",
            layout: "vertical",
            spacing: "sm",
            contents: [
              {
                type: "button",
                style: "primary",
                color: "#FF0000",
                action: {
                  type: "postback",
                  label: "‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ô‡∏µ‡πâ",
                  data: `action=deleteRoom&roomId=${room._id}`,
                },
              },
            ],
          },
        })),
      },
    };

    return client.replyMessage(replyToken, roomsFlexMessage);
  } catch (error) {
    console.error("Error fetching rooms:", error);
    return client.replyMessage(replyToken, {
      type: "text",
      text: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    });
  }
};

const deleteRoom = async (roomId, replyToken) => {
  try {
    const result = await roomsCollection.deleteOne({ _id: new ObjectId(roomId) });

    if (result.deletedCount > 0) {
      return client.replyMessage(replyToken, {
        type: "text",
        text: "‚úÖ ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      });
    } else {
      return client.replyMessage(replyToken, {
        type: "text",
        text: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
      });
    }
  } catch (error) {
    console.error("Error deleting room:", error);
    return client.replyMessage(replyToken, {
      type: "text",
      text: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    });
  }
};

// Start the server
app.listen(process.env.PORT || 3000, () => {
  console.log("Server running on port " + (process.env.PORT || 3000));
});

app.post("/webhook", line.middleware(lineConfig), (req, res) => {
  Promise.all(req.body.events.map(handleEvent))
    .then((result) => res.json(result))
    .catch((err) => {
      console.error(err);
      res.status(500).end();
    });
});
